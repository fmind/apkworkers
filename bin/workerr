#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import json
import re
import sys
from StringIO import StringIO

from apkworkers import config
from pyrabbit.api import Client

LIMIT = 10000
REQUEUE = True

PARSER = argparse.ArgumentParser(description="Retrieve (and consume) apkworkers errors.")
PARSER.add_argument('--limit', '-l', type=int, default=LIMIT, help='messages per queue.')
PARSER.add_argument('--consume', '-c', action='store_true', help='delete messages.')

# required to determine if a queue contains Celery errors
QERROR_PATTERN = re.compile(r'{0}{{8}}-{0}{{4}}-{0}{{4}}-{0}{{4}}-{0}{{12}}'.format('[a-fA-F0-9]'))


class output(list):
    def __enter__(self):
        self._stdout = sys.stdout
        sys.stdout = self._stringio = StringIO()
        return self

    def __exit__(self, *args):
        self.extend(self._stringio.getvalue().splitlines())
        del self._stringio  # free up some memory
        sys.stdout = self._stdout


def error_queues(client, vhost):
    """Return the error queues of a vhost."""
    with output():
        queues = client.get_queues(vhost)

    for q in queues:
        qname = q['name']

        if not QERROR_PATTERN.match(qname):
            continue

        yield qname


def error_messages(client, vhost, queue, limit=LIMIT, requeue=REQUEUE):
    """Return the error messages of a vhost."""
    with output():
        messages = client.get_messages(vhost, queue, count=limit, requeue=requeue)

    if messages is None:
        return

    for m in messages:
        doc = json.loads(m['payload'])

        # ignore non failure (e.g. retry)
        if doc['status'] != 'FAILURE':
            continue

        yield doc['result']['exc_message']


def main(args):
    # arguments
    limit = args.limit
    requeue = not args.consume

    # configuration
    url = config.broker_api
    user = config.broker_user
    vhost = config.broker_vhost
    password = config.broker_password

    # client
    client = Client(url, user, password)

    # errors
    qerrors = error_queues(client, vhost)
    merrors = [m for q in qerrors for m in error_messages(client, vhost, q, limit=limit, requeue=requeue)]

    return merrors


if __name__ == '__main__':
    args = PARSER.parse_args()

    for e in main(args):
        print(e)
